-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."LandParcel"
(
    id serial NOT NULL,
    owner text COLLATE pg_catalog."default" NOT NULL,
    location text COLLATE pg_catalog."default" NOT NULL,
    "ipfsHash" text COLLATE pg_catalog."default" NOT NULL,
    verified boolean NOT NULL DEFAULT false,
    "createdAt" timestamp(3) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT "LandParcel_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public._prisma_migrations
(
    id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    checksum character varying(64) COLLATE pg_catalog."default" NOT NULL,
    finished_at timestamp with time zone,
    migration_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    logs text COLLATE pg_catalog."default",
    rolled_back_at timestamp with time zone,
    started_at timestamp with time zone NOT NULL DEFAULT now(),
    applied_steps_count integer NOT NULL DEFAULT 0,
    CONSTRAINT _prisma_migrations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.romman
(
    ogc_fid serial NOT NULL,
    wkb_geometry geometry,
    id numeric(10, 0),
    grantor character varying(100) COLLATE pg_catalog."default",
    grantee character varying(100) COLLATE pg_catalog."default",
    instrument character varying(100) COLLATE pg_catalog."default",
    acreage double precision,
    cost double precision,
    term double precision,
    "start date" date,
    "user type" character varying(100) COLLATE pg_catalog."default",
    rent double precision,
    CONSTRAINT romman_pk PRIMARY KEY (ogc_fid)
);

CREATE TABLE IF NOT EXISTS public.user_land
(
    id integer NOT NULL,
    blockchain_id text COLLATE pg_catalog."default",
    land_id integer,
    CONSTRAINT user_land_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    blockchain_id text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT blockchain_id PRIMARY KEY (blockchain_id)
);

CREATE TABLE IF NOT EXISTS public.transactions (
    id SERIAL PRIMARY KEY,
    type VARCHAR(50) NOT NULL, -- e.g., "Transfer" or "Verification"
    land_id INTEGER NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    initiator TEXT NOT NULL, -- Wallet address of the initiator
    recipient TEXT -- Wallet address of the recipient (optional)
);

CREATE TABLE IF NOT EXISTS public.land_submissions (
    id SERIAL PRIMARY KEY,
    location TEXT NOT NULL,
    document_path TEXT NOT NULL,
    description TEXT,
    owner_wallet TEXT NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'pending', -- 'pending', 'approved', 'rejected'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP,
    admin_notes TEXT,
    reviewed_by TEXT
);

CREATE TABLE IF NOT EXISTS public.lands (
    id SERIAL PRIMARY KEY,
    location TEXT NOT NULL,
    document_path TEXT,
    owner_wallet TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP
);

ALTER TABLE IF EXISTS public.user_land
    ADD CONSTRAINT user_land_blockchain_id_fkey FOREIGN KEY (blockchain_id)
    REFERENCES public.users (blockchain_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_land
    ADD CONSTRAINT user_land_land_id_fkey FOREIGN KEY (land_id)
    REFERENCES public.romman (ogc_fid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;